// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MANAGER
  DESIGNER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  PROBLEM
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model User {
  id         Int      @id @default(autoincrement())
  login      String   @unique
  password   String
  department Department? @relation(fields: [departmentId], references: [id])
  departmentId Int?
  role       UserRole? @default(USER)
  name       String
  tasks      Task[]
  comments   Comment[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  projects Project[]
}

model Task {
  id Int @id @default(autoincrement())
  title String
  description String?
  priority TaskPriority @default(LOW)
  status TaskStatus @default(TODO)
  deadline DateTime?
  project Project? @relation(fields: [projectId], references: [id])
  projectId Int?
  assignee User? @relation(fields: [assigneeId], references: [id])
  assigneeId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comments Comment[]
}

model Comment {
  id Int @id @default(autoincrement())
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task Task? @relation(fields: [taskId], references: [id])
  taskId Int?
  author User? @relation(fields: [authorId], references: [id])
  authorId Int?
}

model Project {
  id Int @id @default(autoincrement())
  title String
  description String?
  startDate DateTime?
  endDate DateTime?
  client String
  tasks Task[]
  users User[]
  department Department[]
}

model Department {
  id Int @id @default(autoincrement())
  name String
  users User[]
  projects Project[]
}
